    ##########################
    ## OpenSSH
    ##########################
     
    # 1. Installing OpenSSH (client and server)
    # Ubuntu
    sudo apt update && sudo apt install openssh-server openssh-client
     
    # CentOS
    sudo dnf install openssh-server openssh-clients
     
    # connecting to the server
    ssh -p 22 username@server_ip        # => Ex: ssh -p 2267 john@192.168.0.100
    ssh -p 22 -l username server_ip
    ssh -v -p 22 username@server_ip     # => verbose
     
    # 2. Controlling the SSHd daemon
    # checking its status
    sudo systemctl status ssh       # => Ubuntu
    sudo systemctl status sshd      # => CentOS
     
    # stopping the daemon
    sudo systemctl stop ssh       # => Ubuntu
    sudo systemctl stop sshd      # => CentOS
     
    # restarting the daemon
    sudo systemctl restart ssh       # => Ubuntu
    sudo systemctl restart sshd      # => CentOS
     
    # enabling at boot time 
    sudo systemctl enable ssh       # => Ubuntu
    sudo systemctl enable sshd      # => CentOS
     
    sudo systemctl is-enabled ssh       # => Ubuntu
    sudo systemctl is-enabled sshd      # => CentOS
     
    # 3. Securing the SSHd daemon
    # change the configuration file (/etc/ssh/sshd_config) and then restart the server
    man sshd_config
     
    a) Change the port
    Port 2278
     
    b) Disable direct root login
    PermitRootLogin no
     
    c) Limit Users’ SSH access
    AllowUsers stud u1 u2 john
     
    d) Filter SSH access at the firewall level (iptables)
     
    e) Activate Public Key Authentication and Disable Password Authentication
     
    f) Use only SSH Protocol version 2
     
    g) Other configurations:
    ClientAliveInterval 300
    ClientAliveCountMax 0
    MaxAuthTries 2
    MaxStartUps 3
    LoginGraceTime 20
    
    
    
 ==================
 Create and copy ssh private and public key.
ssh-keygen -t rsa
ssh-copy-id x@xxxx
ssh -p x x@xxxx
======================================





=======================================================================================
=========================================================================================



sudo nano /etc/ssh/sshd_config
PermitRootLogin no
MaxAuthTries 3
LoginGraceTime 20
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
KerberosAuthentication no
GSSAPIAuthentication no
X11Forwarding no
PermitUserEnvironment no
AllowAgentForwarding no
AllowTcpForwarding no
PermitTunnel no
 DebianBanner no
 ===
Now validate the syntax of your new configuration by running sshd in test mode:
sudo sshd -t
If your configuration file has a valid syntax, there will be no output. In the event of a syntax error, there will be an output describing the issue.
 ===
 
                    Implementing an IP Address Allowlist
                    
 
     • Restrict all users to a specific IP address:
AllowUsers *@203.0.113.1
    • Restrict all users to a specific IP address range using Classless Inter-Domain Routing (CIDR) notation:
AllowUsers *@203.0.113.0/24
    • Restrict all users to a specific IP address range (using wildcards):
AllowUsers *@203.0.113.*
    • Restrict all users to multiple specific IP addresses and ranges:
AllowUsers *@203.0.113.1 *@203.0.113.2 *@192.0.2.0/24 *@172.16.*.1
    • Disallow all users except for named users from specific IP addresses:
AllowUsers sammy@203.0.113.1 alex@203.0.113.2
    • Restrict a specific user to a specific IP address, while continuing to allow all other users to log in without restrictions:
Match User ashley
  AllowUsers ashley@203.0.113.1
  
  AllowUsers *@203.0.113.1
  
==
Save and close the file, and then proceed to test your configuration syntax:
sudo sshd -t
==


                       Restricting the Shell of a User
sudo adduser --shell /usr/sbin/nologin alex

Alternatively, you can change the shell of an existing user to be nologin:
sudo usermod --shell /usr/sbin/nologin sammy


ssh/sshd.config
Match User alex
  ForceCommand internal-sftp
  ChrootDirectory /home/alex/
 
